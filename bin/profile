#!/usr/bin/env ruby
# require "bundler/setup"
require "ruby-prof"
require "optparse"
require "fileutils"
require_relative "../lib/lutaml/model"

options = {
  mode: :wall, # default profiling mode
  file: "spec/fixtures/example.uml"
}

OptionParser.new do |opts|
  opts.banner = "Usage: bin/profile [options]"

  opts.on("-f", "--file PATH", "Path to input UML file") do |path|
    options[:file] = path
  end

  opts.on("-m", "--mode MODE", "Profiling mode: wall (default), memory, allocations") do |mode|
    options[:mode] = mode.to_sym
  end
end.parse!

# Map user input to ruby-prof modes
mode_map = {
  wall: RubyProf::WALL_TIME,
  memory: RubyProf::MEMORY,
  allocations: RubyProf::ALLOCATIONS
}

profiler = RubyProf::Profile.new(measure_mode: mode_map[options[:mode]] || RubyProf::WALL_TIME)

large_xml = "<root>\n"
1000.times do |i|
  large_xml += "<item id='#{i}'><name>Test #{i}</name><value>#{i}</value></item>\n"
end
large_xml += "</root>"

class DeserializerItem < Lutaml::Model::Serializable
  attribute :id, :integer
  attribute :name, :string
  attribute :value, :integer

  xml do
    map_attribute "id", to: :id
    map_element "value", to: :value
    map_element "name", to: :name
  end
end

class Deserializer < Lutaml::Model::Serializable
  attribute :item, DeserializerItem, collection: true

  xml do
    root "root"
    map_element "item", to: :item
  end
end

puts "[Profiling] Mode: #{options[:mode].capitalize} | File: #{options[:file]}"
puts "[Profiling] Starting..."

result = profiler.profile do
  document = Deserializer.from_xml(large_xml)
  document.to_xml
end

# Output directory
FileUtils.mkdir_p("tmp")

# Output formats
flat_output = "tmp/profile_flat.txt"
calltree_output = "tmp/profile_callgrind.out"
html_output = "tmp/profile.html"

puts "[Profiling] Writing reports..."

File.open(flat_output, "w") do |file|
  RubyProf::FlatPrinter.new(result).print(file)
end

RubyProf::CallTreePrinter.new(result).print(path: "tmp", profile: "profile_callgrind.out")

File.open(html_output, "w") do |file|
  RubyProf::GraphHtmlPrinter.new(result).print(file)
end

puts <<~MSG

✅ Profiling complete.

  • Flat output:     #{flat_output}
  • Callgrind file:  #{calltree_output} (open in QCacheGrind or KCacheGrind)
  • HTML graph:      #{html_output}

  Example usage:
    bin/profile -f path/to/file.uml -m allocations

MSG
