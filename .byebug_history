exit
rule.namespaced_names(options[:default_namespace])
options
rule
rule_names
n
attr
doc.to_xml
doc
no_root?(:xml)
attr
n
attr
rule
c
type.apply_mappings(value, format, options)
type <= Serialize && castable?(value, format)
n
Utils.collection?(value)
value
value.map do |v| cast(v, format, options) end
value
n
options
format
value
c
exit
attr
attr.cast(children.first, :xml, options.except(:mappings))
children.first
n
children
n
selectors
n
c
exit
c
exit
val
c
n
children
n
c
exit
c
n
c
exit
exit'
doc.root.namespaced_name
doc.namespaced_name
doc
doc.children.first.text
doc.to_xml
doc
mappings_for(:xml).no_root?
mappings_for(:xml)
mappings_for
@mappings[:xml].no_root?
@mappings
c
@mappings[:xml].no_root?
@mappings[:xml]
@mappings
options[:mappings]
exit
options
rule
attr
rule.root?
rule.root
rule
doc.root.namespaced_name
doc.to_xml
doc.root.to_xml
doc.root
doc
instance.root
instance.no_root
instance.no_root?
instance
doc.children.first.namespaced_name
doc.children.first.to_xml
doc.children.first.namespaced_name
doc.children.first
doc.children.count
doc.children
doc
children
values
n
doc.children
rule_names
c
exit
val
n
instance
rule
doc.to_xml
doc
n
attr
n
rule
exit
self.class < Lutaml::Model::Collection
self.class
self
collection_name
:"@#{@collection_name}"
c
:"@#{@collection_name}"
c
:"@#{@collection_name}"
@titles
@collection_name
c
n
value
xml
n
element_name
n
c
prefixed_xml.to_xml
prefixed_xml
tag_name
n
c
exit
n
xml_mapping
n
mapper_class
n
xml
c
exit
n
mapper_class
n
root.titles
root
n
options
exit
self.to_xml
attributes
element_name
self.children
self
n
c
type
name
c!
h
self
h
c
n
collection_name
n
value.map { |v| type.cast(v) }
value
n
c
exit
value.map { |v| type.cast(v) }
value
valu
n
type
n
c
exit
collection_name
items
n
name
self
name
value
n
self
c
super()
n
collection_name
c
attr.collection_class.new([], attr.name, attr.type)
c
self
c
exit
self.class.attributes
c
exit
self.class < Lutaml::Model::Collection
self.class
self
c
self.class
c
collection_name
n
self.class
self
n
value
n
default
n
self
name
value
name
c
self.class
c
exit
n
value
attr
n
c
exit
n
name
c
self.class
c
exit
attr.collection_class.new([], attr.name, attr.type)
attr.collection_class.new
n
attr.collection?
c
exit
attr.type
attr
attr.collection?
attrs
attr.default
attr
name
c
options
type
name
c
exit
