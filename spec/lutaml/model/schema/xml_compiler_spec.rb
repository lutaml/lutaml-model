require "spec_helper"
require "lutaml/model/schema"
require "lutaml/xsd"

RSpec.describe Lutaml::Model::Schema::XmlCompiler do
  describe ".to_models" do
    context "with valid xml schema, it should generate the models" do
      let(:valid_value_xml_example) do
        <<~VALID_XML_EXAMPLE
          <CT_MathTest>
            <MathTest val="1"/>
            <MathTest1 val="1"/>
          </CT_MathTest>
        VALID_XML_EXAMPLE
      end

      let(:invalid_value_xml_example) do
        <<~INVALID_XML_EXAMPLE
          <CT_MathTest>
            <MathTest val="0"/>
            <MathTest1 val="-3"/>
          </CT_MathTest>
        INVALID_XML_EXAMPLE
      end

      Dir.mktmpdir do |dir|
        it "creates the model files, requires them, and tests them with valid and invalid xml" do
          described_class.to_models(File.read("spec/fixtures/xml/test_schema.xsd"), output_dir: dir, create_files: true)
          expect(File).to exist("#{dir}/ct_math_test.rb")
          expect(File).to exist("#{dir}/st_integer255.rb")
          expect(File).to exist("#{dir}/long.rb")
          Dir.each_child(dir) { |child| require_relative File.expand_path("#{dir}/#{child}") }
          expect(defined?(CTMathTest)).to eq("constant")
          expect(CTMathTest.from_xml(valid_value_xml_example).to_xml).to be_equivalent_to(valid_value_xml_example)
          expect { CTMathTest.from_xml(invalid_value_xml_example) }.to raise_error(Lutaml::Model::Type::InvalidValueError)
        end
      end
    end

    context "when processing examples from classes/files generated by valid xml schema" do
      Dir.mktmpdir do |dir|
        before do
          described_class.to_models(
            File.read("spec/fixtures/xml/math_document_schema.xsd"),
            output_dir: dir,
            create_files: true,
          )
          require_relative "#{dir}/math_document"
        end

        let(:valid_example) do
          File.read("spec/fixtures/xml/valid_math_document.xml")
        end
        let(:invalid_example) do
          File.read("spec/fixtures/xml/invalid_math_document.xml")
        end

        it "does not raise error with valid example and creates files" do
          expect(defined?(MathDocument)).to eq("constant")
          parsed = MathDocument.from_xml(valid_example)
          expect(parsed.title).to eql("Example Title")
          expect(parsed.ipv4_address).to eql("192.168.1.1")
          expect(parsed.to_xml).to be_equivalent_to(valid_example)
        end

        it "raises InvalidValueError" do
          expect(defined?(MathDocument)).to eq("constant")
          expect { MathDocument.from_xml(invalid_example) }
            .to raise_error(Lutaml::Model::Type::InvalidValueError)
        end
      end
    end

    context "when processing example from lutaml-model#260" do
      Dir.mktmpdir do |dir|
        before do
          described_class.to_models(
            File.read("spec/fixtures/xml/address_example_260.xsd"),
            output_dir: dir,
            create_files: true,
          )
          require_relative "#{dir}/address"
        end

        let(:address) do
          <<~ADD
            <Address>
              Oxford Street
              <City>London</City>
              <ZIP>E1 6AN</ZIP>
            </Address>
          ADD
        end

        it "matches parsed xml with input" do
          expect(defined?(Address)).to eq("constant")
          expect(Address.from_xml(address).to_xml).to be_equivalent_to(address)
        end
      end
    end

    context "when classes are generated but files are not created" do
      let(:schema_classes_hash) do
        described_class.to_models(
          File.read("spec/fixtures/xml/user.xsd"),
        )
      end

      let(:expected_classes) do
        [
          "NonNegativeInteger",
          "PositiveInteger",
          "Base64Binary",
          "UnsignedLong",
          "UnsignedInt",
          "HexBinary",
          "Token",
          "Long",
          "Id",
          "User",
        ]
      end

      it "matches the expected class names of the schema" do
        expect(schema_classes_hash.keys).to eql(expected_classes)
      end
    end

    context "when classes are generated and loaded but files are not created" do
      before do
        described_class.to_models(
          File.read("spec/fixtures/xml/user.xsd"),
          load_classes: true,
        )
      end

      let(:expected_classes) do
        %w[
          NonNegativeInteger
          PositiveInteger
          Base64Binary
          UnsignedLong
          UnsignedInt
          HexBinary
          Token
          Long
          User
        ]
      end

      let(:xml) do
        <<~XML
          <User>
            <id>1112</id>
            <age>29</age>
            <token>u9dId901dp13f</token>
          </User>
        XML
      end

      it "matches the expected class names of the schema" do
        expected_classes.each do |klass|
          expect(be_const_defined(klass)).to be_truthy
        end
        expect(User.from_xml(xml).to_xml).to be_equivalent_to(xml)
      end
    end
  end

end

